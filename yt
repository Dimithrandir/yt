#!/bin/sh

usage() {
	printf "Usage: yt (-s <query> [<number_of_items>] | -d <url>)\n"
	printf "Get YouTube videos metadata using yt-dlp.\n\n"
	printf "  -s, --search\t\tperform a search\n"
	printf "  -d, --description\tprint video metadata\n\n"
	printf "  -t, --thumbnail\tshow video thumbnail\n\n"
}

check_deps() {
	for dep in "yt-dlp" "jq" "sed" "feh" ; do
		command -v "$dep" >/dev/null || echo "$dep not found"
	done
}

RED="\033[0;31m"
NC="\033[0m"

json_format="{
	Title: .title,
	Uploader: .uploader,
	Duration: (if .duration then ( ( .duration / 60 | floor | tostring ) + \":\" + ( ( \"0\" + ( .duration % 60 | tostring ) ) | .[-2:] ) ) else \"n\/a\" end),
	Date: .upload_date | strptime(\"%Y%m%d\") | strftime($( locale -k LC_TIME | grep ^d_fmt | cut -d = -f 2 )),
	Views: .view_count | tostring | explode | reverse | implode | sub(\"(?<a>[0-9]{3})\"; \"\(.a)$( locale thousands_sep )\"; \"g\") | explode | reverse | implode,
	Thumbnail: .thumbnail,
	URL: .webpage_url
}"

check_deps

case "$1" in 
	-s|--search) 
		[ -z "$2" ] && usage && exit 0
		[ -z "$3" ] && n=5 || n="$3"
		# fetch json, parse with jq, print in rt, decolorize and save output
		output=$( yt-dlp -j ytsearch"$n":"$2" | jq --color-output --tab --unbuffered "$json_format" | tee /dev/tty | sed 's/\x1b\[[0-9;]*m//g' ) 
		urls=$( echo "$output" | jq -r -s -M "[.[].URL]" )
		url_len=$( echo "$urls" | jq -r -M "length" )
	
		[ "$url_len" -eq 0 ] && echo "No results found" && exit 0

		while true ; do
			echo Select video to play \(1-"$url_len"\)\; \'q\' to quit:
			read choice
			if [ "$choice" = "q" ] || [ "$choice" = "Q" ] ; then 
				exit 0
			elif [ "$choice" -gt 0 ] 2>/dev/null && [ "$choice" -le "$url_len" ]  ; then
				url=$( echo "$output" | jq -r -s -M ".[$choice - 1].URL" )
				echo Playing "$( echo $output | jq -r -s -M ".[$choice - 1].Title" )"...
				mpv --no-terminal "$url" &
				exit 0
			else
				printf "${RED}Invalid choice${NC}\n"
			fi
		done
		;;
	-d|--description) 
		[ "$#" -lt 2 ] && usage && exit 0
		json_data=$( yt-dlp -j "$2" | jq )
		echo "$json_data" | jq --tab "$json_format"
		feh -g 480x360+30+240 --scale-down -B "black" -^ "youtube-thumbnail" "$( echo "$json_data" | jq -r -M "[.thumbnails|.[]|.url|select(contains(\"hqdefault.jpg\"))]|last" )"
		exit 0 ;;
	-t|--thumbnail)
		[ "$#" -lt 2 ] && usage && exit 0
		feh -g 480x360+760+40 --scale-down -B "black" -^ "youtube-thumbnail" "$( yt-dlp --list-thumbnails "$2" | grep hqdefault.jpg | tail -1 | sed 's/^[ \t0-9]*//;s/?.*$//' )" ;;
	*) usage ;;
esac
